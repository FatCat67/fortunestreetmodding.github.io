---
import BoardsLayout from '~/layouts/boardsLayout.astro';
import "./table.css";
---
<script>
  import {Tabulator, FormatModule, SortModule, FilterModule, EditModule, type CellComponent, type FormatterParams} from 'tabulator-tables';

  Tabulator.registerModule([FormatModule, SortModule, FilterModule, EditModule]);
  const data = await fetch('./boards.json').then((response) => response.json());

  const dateFormatter = (millis: any) => {
    return new Date(millis).toISOString().split('T')[0];
  }

  const dateFilter = (headerValue: string, rowValue: number, rowData: any, filterParams: any) => {
    return dateFormatter(rowValue).includes(headerValue);
  };

  const dateSorter = (a: number, b: number) => {
    if (a < b) {
      return 1;
    } else if (a > b) {
      return -1;
    } else {
      return 0;
    }
  }

  const authorsPlainFormatter = (authors: any) => authors.map((author: any) => author.name).join(", ");
  const authorsFormatter = (authors: any) => {
    let html = "";
    for (let i = 0; i < authors.length; i++) {
      const name = authors[i].name;
      const url = authors[i].url;
      if (url) {
        html += "<a href='" + url + "'>" + name + "</a>"
      } else {
        html += name
      }
      if(i<authors.length-1) {
        html += ", ";
      }
    }
    return html;
  }

  const authorsSorter = (a: any, b: any) => {
    return authorsPlainFormatter(a).localeCompare(authorsPlainFormatter(b))
  };

  const authorsFilter = (headerValue: string, rowValue: any, rowData: any, filterParams: any) => {
    return authorsPlainFormatter(rowValue).includes(headerValue);
  };
  
  new Tabulator("#table", {
    columns: [
      { title: "Name", field: "nameEn", headerFilter: true, formatter: function(cell, _formatterParams){
        return "<a href='/boards/" + cell.getRow().getData().slug + "'>" + cell.getValue() + "</a>";
      }},
      { title: "Rule Set", field: "ruleSet", headerFilter: true },
      { title: "Theme", field: "theme", headerFilter: true },
      { title: "Background", field: "backgroundData.name", headerFilter: true },
      { title: "Initial Cash", field: "initialCash", headerFilter: true },
      { title: "Target Amount", field: "targetAmount", headerFilter: true },
      { title: "Dice Roll", field: "maxDiceRoll", headerFilter: true },
      { title: "States", field: "frbFiles.length", headerFilter: true },
      { title: "Tags", field: "tags", headerFilter: true },
      { title: "Version", field: "currentVersion", headerFilter: true },
      { title: "Last Updated", field: "lastUpdated", headerFilter: true, headerFilterFunc: dateFilter, sorter: dateSorter, formatter: (cell) => dateFormatter(cell.getValue())},
      { title: "Upload Date", field: "uploadDate", headerFilter: true, headerFilterFunc: dateFilter, sorter: dateSorter, formatter: (cell) => dateFormatter(cell.getValue()) },
      { title: "Authors", field: "authors", headerFilter: true, headerFilterFunc: authorsFilter, sorter: authorsSorter, formatter: (cell) => authorsFormatter(cell.getValue()) }
    ],
    data: data
  });

  document.getElementById("loading")!.style.display = "none";
</script>
<BoardsLayout title="Boards">
  <div id="loading" style="display: flex; justify-content:center; align-items:center; height: 100%">
    <div class="spinner-border" style="width: 10rem; height: 10rem;" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>
  <div class="album mx-3" style="display: flex; justify-content: center;">
    <div id="table"></div>
  </div>
</BoardsLayout>
